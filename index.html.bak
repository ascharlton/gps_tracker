<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Offline GPS Tracker (WebSocket)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/static/leaflet.css" />
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <style>
    html, body { height: 100%; margin: 0; }
    #map { height: 100vh; width: 100%; background: lightgray; }
    #info {
      position: absolute; top: 20px; left: 100px;
      background: rgba(255,255,255,0.9);
      padding: 6px 12px; border-radius: 8px;
      font-family: sans-serif; z-index: 1000;
      box-shadow: 0 1px 4px rgba(0,0,0,0.2);
    }
    .zoom-level-display {
      background: rgba(255,255,255,0.9); padding: 6px 8px;
      border-radius: 6px; font-family: sans-serif;
      font-size: 14px; box-shadow: 0 1px 4px rgba(0,0,0,0.2);
    }
    .leaflet-control-layers-toggle {
      background-image: url('/static/icons/globe.png') !important;
      background-size: 20px 20px;
      width: 30px !important;
      height: 30px !important;
    }

  </style>
</head>
<body>
  <div id="info">Distance: 0.00 km</div>
  <div id="map"></div>

  <!-- Local Leaflet -->
  <script src="/static/leaflet.js"></script>
  <!-- Socket.IO client (served automatically by socket.io on server) -->
  <script src="/socket.io/socket.io.js"></script>

  <script type="module">
  // --- Map setup ---
  const osm = L.tileLayer('/tiles_osm/{z}/{x}/{y}.png', { maxZoom: 19, attribution: "OSM" });
  const satellite = L.tileLayer('/tiles_satellite/{z}/{x}/{y}.png', { maxZoom: 19, attribution: "Satellite" });

  const map = L.map('map', { center: [44.3, 15.2], zoom: 12, layers: [osm] });
  //const baseMaps = { "OSM": osm, "Satellite": satellite };
  //L.control.layers(baseMaps).addTo(map);
  const baseMaps = { "🌍 OSM": osm, "🛰 Satellite": satellite };
  L.control.layers(baseMaps, {}, { collapsed: true }).addTo(map);


  // --- Zoom level display ---
  const zoomLevelControl = L.control({ position: 'bottomright' });
  zoomLevelControl.onAdd = () => {
    const div = L.DomUtil.create('div', 'zoom-level-display');
    div.innerHTML = `Zoom: ${map.getZoom()}`;
    return div;
  };
  zoomLevelControl.addTo(map);
  map.on('zoomend', () => {
    document.querySelector('.zoom-level-display').innerHTML = `Zoom: ${map.getZoom()}`;
  });

  // --- Track + marker ---
  const customIcon = L.icon({ iconUrl: "/static/icons/marker-icon.png", shadowUrl: "/static/icons/marker-shadow.png",
    iconSize: [25, 41], iconAnchor: [12, 41], popupAnchor: [1, -34], shadowSize: [41, 41] });
  const marker = L.marker([44.3, 15.2], { icon: customIcon }).addTo(map);
  const track = [];
  const polyline = L.polyline(track, { color: 'red' }).addTo(map);

  let lastTrackUpdate = 0;
  let totalDistance = 0;
  const haversineKm = (a, b) => {
    const R = 6371, toRad = d => d * Math.PI/180;
    const dLat = toRad(b[0]-a[0]), dLon = toRad(b[1]-a[1]);
    const lat1 = toRad(a[0]), lat2 = toRad(b[0]);
    const h = Math.sin(dLat/2)**2 + Math.cos(lat1)*Math.cos(lat2)*Math.sin(dLon/2)**2;
    return R * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1-h));
  };

  // --- WebSocket client ---
  const socket = io();
  socket.on("gps", (gpsData) => {
    const latLng = [gpsData.lat, gpsData.lon];
    marker.setLatLng(latLng);
    map.panTo(latLng);

    const now = Date.now();
    if (now - lastTrackUpdate >= 2000) {
      if (track.length > 0) {
        totalDistance += haversineKm(track[track.length-1], latLng);
      }
      track.push(latLng);
      polyline.setLatLngs(track);
      document.getElementById("info").textContent = `Distance: ${totalDistance.toFixed(2)} km`;
      lastTrackUpdate = now;
    }
  });
  </script>
</body>
</html>

